// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package service

import (
	endpoint "dakhou/todo/pkg/endpoint"
	http1 "dakhou/todo/pkg/http"
	service "dakhou/todo/pkg/service"
	endpoint1 "github.com/go-kit/kit/endpoint"
	log "github.com/go-kit/kit/log"
	prometheus "github.com/go-kit/kit/metrics/prometheus"
	opentracing "github.com/go-kit/kit/tracing/opentracing"
	grpc "github.com/go-kit/kit/transport/grpc"
	http "github.com/go-kit/kit/transport/http"
	group "github.com/oklog/oklog/pkg/group"
	opentracinggo "github.com/opentracing/opentracing-go"
)

func createService(endpoints endpoint.Endpoints) (g *group.Group) {
	g = &group.Group{}
	initHttpHandler(endpoints, g)
	initGRPCHandler(endpoints, g)
	return g
}
func defaultHttpOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]http.ServerOption {
	options := map[string][]http.ServerOption{
		"Add":            {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Add", logger))},
		"AddCategory":    {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "AddCategory", logger))},
		"Delete":         {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Delete", logger))},
		"DeleteCategory": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "DeleteCategory", logger))},
		"Get":            {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Get", logger))},
		"GetCatChildes":  {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetCatChildes", logger))},
		"GetCategory":    {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetCategory", logger))},
		"GetChildren":    {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "GetChildren", logger))},
		"RemoveComplete": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "RemoveComplete", logger))},
		"SetComplete":    {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "SetComplete", logger))},
		"SetStar":        {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "SetStar", logger))},
		"Update":         {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "Update", logger))},
		"UpdateCategory": {http.ServerErrorEncoder(http1.ErrorEncoder), http.ServerErrorLogger(logger), http.ServerBefore(opentracing.HTTPToContext(tracer, "UpdateCategory", logger))},
	}
	return options
}
func defaultGRPCOptions(logger log.Logger, tracer opentracinggo.Tracer) map[string][]grpc.ServerOption {
	options := map[string][]grpc.ServerOption{
		"Add":            {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "Add", logger))},
		"AddCategory":    {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "AddCategory", logger))},
		"Delete":         {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "Delete", logger))},
		"DeleteCategory": {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "DeleteCategory", logger))},
		"Get":            {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "Get", logger))},
		"GetCatChildes":  {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "GetCatChildes", logger))},
		"GetCategory":    {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "GetCategory", logger))},
		"GetChildren":    {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "GetChildren", logger))},
		"RemoveComplete": {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "RemoveComplete", logger))},
		"SetComplete":    {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "SetComplete", logger))},
		"SetStar":        {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "SetStar", logger))},
		"Update":         {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "Update", logger))},
		"UpdateCategory": {grpc.ServerErrorLogger(logger), grpc.ServerBefore(opentracing.GRPCToContext(tracer, "UpdateCategory", logger))},
	}
	return options
}
func addDefaultEndpointMiddleware(logger log.Logger, duration *prometheus.Summary, mw map[string][]endpoint1.Middleware) {
	mw["Get"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Get")), endpoint.InstrumentingMiddleware(duration.With("method", "Get"))}
	mw["Add"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Add")), endpoint.InstrumentingMiddleware(duration.With("method", "Add"))}
	mw["SetComplete"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "SetComplete")), endpoint.InstrumentingMiddleware(duration.With("method", "SetComplete"))}
	mw["RemoveComplete"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "RemoveComplete")), endpoint.InstrumentingMiddleware(duration.With("method", "RemoveComplete"))}
	mw["Delete"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Delete")), endpoint.InstrumentingMiddleware(duration.With("method", "Delete"))}
	mw["Update"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "Update")), endpoint.InstrumentingMiddleware(duration.With("method", "Update"))}
	mw["SetStar"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "SetStar")), endpoint.InstrumentingMiddleware(duration.With("method", "SetStar"))}
	mw["GetChildren"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetChildren")), endpoint.InstrumentingMiddleware(duration.With("method", "GetChildren"))}
	mw["GetCategory"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetCategory")), endpoint.InstrumentingMiddleware(duration.With("method", "GetCategory"))}
	mw["AddCategory"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "AddCategory")), endpoint.InstrumentingMiddleware(duration.With("method", "AddCategory"))}
	mw["UpdateCategory"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "UpdateCategory")), endpoint.InstrumentingMiddleware(duration.With("method", "UpdateCategory"))}
	mw["DeleteCategory"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "DeleteCategory")), endpoint.InstrumentingMiddleware(duration.With("method", "DeleteCategory"))}
	mw["GetCatChildes"] = []endpoint1.Middleware{endpoint.LoggingMiddleware(log.With(logger, "method", "GetCatChildes")), endpoint.InstrumentingMiddleware(duration.With("method", "GetCatChildes"))}
}
func addDefaultServiceMiddleware(logger log.Logger, mw []service.Middleware) []service.Middleware {
	return append(mw, service.LoggingMiddleware(logger))
}
func addEndpointMiddlewareToAllMethods(mw map[string][]endpoint1.Middleware, m endpoint1.Middleware) {
	methods := []string{"Get", "Add", "SetComplete", "RemoveComplete", "Delete", "Update", "SetStar", "GetChildren", "GetCategory", "AddCategory", "UpdateCategory", "DeleteCategory", "GetCatChildes"}
	for _, v := range methods {
		mw[v] = append(mw[v], m)
	}
}
